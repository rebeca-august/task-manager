{"version":3,"sources":["context/TaskListContext.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["TaskListContext","createContext","TaskListProvider","props","initialState","JSON","parse","localStorage","getItem","useState","tasks","setTasks","editItem","setEditItem","useEffect","setItem","stringify","Provider","value","addTask","title","i","id","removeTask","filter","task","clearList","findItem","item","find","editTask","newTasks","map","children","Task","useContext","className","onClick","TaskList","length","reverse","key","TaskForm","setTitle","onSubmit","e","preventDefault","onChange","target","placeholder","required","type","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d970800.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const TaskListContext = createContext();\n\nconst TaskListProvider = props => {\n    const initialState = JSON.parse(localStorage.getItem(\"tasks\"))\n        || [];\n\n    const [tasks, setTasks] = useState(initialState);\n\n    const [editItem, setEditItem] = useState(null);\n\n    useEffect(() => {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }, [tasks]);\n\n    const addTask = (title, i) => {\n        setTasks([...tasks, { title, id: { i } }]);\n    };\n\n    const removeTask = id => {\n        setTasks(tasks.filter(task => task.id !== id));\n    };\n\n    const clearList = () => {\n        setTasks([]);\n    };\n\n    const findItem = id => {\n        const item = tasks.find(task => task.id === id);\n\n        setEditItem(item);\n    };\n\n    const editTask = (title, id) => {\n        const newTasks = tasks.map(task =>\n            ((task.id === id) ? { title, id } : task));\n\n        setTasks(newTasks);\n        setEditItem(null);\n    };\n\n    return (\n        <TaskListContext.Provider\n            value={{\n                tasks,\n                addTask,\n                removeTask,\n                clearList,\n                findItem,\n                editTask,\n                editItem\n            }}>\n            {props.children}\n        </TaskListContext.Provider>\n    );\n};\n\nexport default TaskListProvider;\n","import React, { useContext } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\n\nconst Task = ({ task }) => {\n    const { removeTask, findItem } = useContext(TaskListContext);\n\n    return (\n        <li className=\"list-item\">\n            <span>{task.title}</span>\n            <div>\n                <button onClick={() => removeTask(task.id)} className=\"btn-delete task-btn\">\n                    <i className=\"fas fa-trash-alt\"></i>\n                </button>\n                <button onClick={() => findItem(task.id)} className=\"btn-edit task-btn\">\n                    <i className=\"fas fa-pen\"></i>\n                </button>\n            </div>\n        </li>\n\n    );\n};\n\nexport default Task;\n","import React, { useContext } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\nimport Task from \"./Task\";\n\nconst TaskList = () => {\n  const { tasks } = useContext(TaskListContext);\n  return (\n    <div>\n      {tasks.length ? (\n        <ul className=\"list\">\n          {tasks.reverse().map((task) => {\n            return <Task task={task} key={task.id} />;\n          })}\n        </ul>\n      ) : (\n        <div className=\"no-tasks\">No Tasks</div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskList;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { TaskListContext } from \"../context/TaskListContext\";\n\nconst TaskForm = () => {\n    const { addTask, clearList, editItem, editTask } = useContext(TaskListContext);\n    const [title, setTitle] = useState(\"\");\n\n    const handleChange = e => {\n        setTitle(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if (!editItem) {\n            addTask(title);\n            setTitle(\"\");\n        } else {\n            editTask(title, editItem.id);\n        }\n    };\n\n    useEffect(() => {\n        if (editItem) {\n            setTitle(editItem.title);\n        } else {\n            setTitle(\"\");\n        }\n    }, [editItem]);\n\n    return (\n        <form onSubmit={handleSubmit} className=\"form\">\n            <input\n                onChange={handleChange}\n                value={title}\n                className=\"task-input\"\n                placeholder=\"Add Task...\"\n                required\n            />\n            <div className=\"buttons\">\n                <button type=\"submit\" className=\"btn add-task-btn\">{editItem ? \"Edit Task\" : \"Add\"}</button>\n                <button onClick={clearList} className=\"btn clear-btn\">Clear</button>\n            </div>\n        </form>\n    );\n};\n\nexport default TaskForm;\n","import React from \"react\";\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            <h1>Task Manager</h1>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport TaskList from \"./components/TaskList\";\nimport TaskForm from \"./components/TaskForm\";\nimport Header from \"./components/Header\";\nimport TaskListContextProvider from \"./context/TaskListContext\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <TaskListContextProvider>\n      <div className=\"container\">\n        <div className=\"app-wrapper\">\n          <Header />\n          <div className=\"main\">\n            <TaskForm />\n            <TaskList />\n          </div>\n        </div>\n      </div>\n    </TaskListContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}